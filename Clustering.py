# -*- coding: utf-8 -*-
"""DS10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pBSN6SPHgaMGdVT1ifP4bdxbq3k0iAwT
"""

#UNSUPERVISED LEARNING - CLUSTERING - K MEANS CLUSTERING
#IN CLUSTERING - THERE IS NO OUTPUT(y),we only consider the INPUT to train our model
#Data - https://raw.githubusercontent.com/ameenmanna8824/DATASETS/main/Mall_Customers.csv

#1.Take the data and create dataframe
import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/ameenmanna8824/DATASETS/main/Mall_Customers.csv')
df

df.info()

df.shape # 200 rows and 5 columns

df.size # It tells us the total number of elements in the dataframe

#Input - Annual Income (k$),Spending Score (1-100)

#Divide the data into input
x = df.iloc[:,3:5].values
x

#VISUALISATION
import matplotlib.pyplot as plt
#plt.scatter(x-axis,y-axis)
plt.scatter(df['Annual Income (k$)'],df['Spending Score (1-100)'])
#Here we have only one cluster ,and this is before applying the clustering technique

#Here our main task is to find out the number of clusters(k) into which our data will be divided
import numpy as np
np.sqrt(200) #200 is the total number of points/rows
#k - No of clusters
#k value should not exceed the square root of the total number of points/rows
#Hence the k value should be in the range 2 to 14

#We need to find out the number of Clusters(k)
#1.ELBOW METHOD - Slightly confusing
#2.SILHOUETTE SCORE METHOD - Very Accurate

#1.ELBOW METHOD
from sklearn.cluster import KMeans
k = range(2,15) #2 is inclusive and 15 is exclusive
#Hence the range is in between 2 and 14

sse = [] #empty list

#for i in range(2,15):
for i in k:
  model_demo = KMeans(n_clusters = i,random_state = 0)
  model_demo.fit(x)
  sse.append(model_demo.inertia_) #.intertia_ - calculates the sum of squared error
plt.scatter(k,sse)
plt.plot(k,sse)

#NOw that we have got the elbow graph
#We will now consider a point at which the eblow is more prominent(projecting from something)
#We will consider k as 5 for now.BUt we are not exactly sure

#2.SILHOUETTE SCORE METHOD

from sklearn.metrics import silhouette_score
k = range(2,15)
for i in k:
  model_demo = KMeans(n_clusters = i,random_state = 0)
  model_demo.fit(x)
  y_pred = model_demo.predict(x)
  print(f'{i} Cluster,Score  = {silhouette_score(x,y_pred)}')
  plt.bar(i,silhouette_score(x,y_pred))

#CONCLUSION : The no of CLUSTERS to be considered is 5.

#APPLY a CLUSTERER
k = 5
from sklearn.cluster import KMeans
model = KMeans(n_clusters = k,random_state = 0)
model.fit(x)

#Let us predict the output
y = model.predict(x) #Predicted output values
y #Here 0,1,2,3,4 are the cluster number

y.size

x[y == 1,1]
#The first '1' is the Cluster no 1 and the second '1' is the column index 1
#The value of input , when cluster 1 is selected and column with index 1 is selected.

x[y == 4,1]
#The '4' here is the cluster number and '1' is the column index 1
#The value of input , when cluster 4 is selected and column index 1 is selected

np.unique(y,return_counts = True)

35+81+39+22+23

#FINAL VISUALISATION
plt.figure(figsize = (10,5))
for i in range(k): #i iterates from 0 to 4 here
  plt.scatter(x[y == i,0],x[y == i,1],label = f'Cluster {i}')
plt.scatter(model.cluster_centers_[:,0],model.cluster_centers_[:,1],s = 100,c = 'yellow',label = 'centroid')
plt.legend()

